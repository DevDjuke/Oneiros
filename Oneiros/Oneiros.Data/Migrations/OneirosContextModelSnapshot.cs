// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oneiros.Data;

#nullable disable

namespace Oneiros.Data.Migrations
{
    [DbContext(typeof(OneirosContext))]
    partial class OneirosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Oneiros.Data.Model.Affinity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Affinities");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Amulet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Amulets");
                });

            modelBuilder.Entity("Oneiros.Data.Model.BackGround", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("BackGround");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Focus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Focus");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Klasse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Klasses");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmuletId")
                        .HasColumnType("int");

                    b.Property<int>("BackGroundId")
                        .HasColumnType("int");

                    b.Property<bool>("Camouflage")
                        .HasColumnType("bit");

                    b.Property<int>("Copper")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PickPocket")
                        .HasColumnType("int");

                    b.Property<int>("Silver")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmuletId");

                    b.HasIndex("BackGroundId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerAffinity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AffinityId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffinityId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerAffinities");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerFocus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FocusId")
                        .HasColumnType("int");

                    b.Property<int>("Niveau")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FocusId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerFocus");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Stackable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerItems");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerKlasse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("KlasseId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KlasseId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerKlasses");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("RaceId");

                    b.ToTable("PlayerRaces");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerRoanoke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RoanokeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoanokeId");

                    b.ToTable("PlayerRoanokes");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Niveau")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RoanokeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoanokeId");

                    b.HasIndex("SkillId");

                    b.ToTable("PlayerSkills");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Niveau")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("SubGroupId");

                    b.ToTable("PlayerSubGroups");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Roanoke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roanokes");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Oneiros.Data.Model.SubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Player", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Amulet", "Amulet")
                        .WithMany()
                        .HasForeignKey("AmuletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.BackGround", "BackGround")
                        .WithMany()
                        .HasForeignKey("BackGroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amulet");

                    b.Navigation("BackGround");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerAffinity", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Affinity", "Affinity")
                        .WithMany()
                        .HasForeignKey("AffinityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithOne("Affinity")
                        .HasForeignKey("Oneiros.Data.Model.PlayerAffinity", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affinity");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerFocus", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Focus", "Focus")
                        .WithMany()
                        .HasForeignKey("FocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithOne("Focus")
                        .HasForeignKey("Oneiros.Data.Model.PlayerFocus", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Focus");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerItem", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithMany("Items")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerKlasse", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Klasse", "Klasse")
                        .WithMany()
                        .HasForeignKey("KlasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithOne("Klasse")
                        .HasForeignKey("Oneiros.Data.Model.PlayerKlasse", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klasse");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerRace", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithOne("Race")
                        .HasForeignKey("Oneiros.Data.Model.PlayerRace", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerRoanoke", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Roanoke", "Roanoke")
                        .WithMany()
                        .HasForeignKey("RoanokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Roanoke");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerSkill", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithMany("Skills")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Roanoke", "Roanoke")
                        .WithMany()
                        .HasForeignKey("RoanokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Roanoke");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Oneiros.Data.Model.PlayerSubGroup", b =>
                {
                    b.HasOne("Oneiros.Data.Model.Player", "Player")
                        .WithOne("SubGroup")
                        .HasForeignKey("Oneiros.Data.Model.PlayerSubGroup", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oneiros.Data.Model.SubGroup", "SubGroup")
                        .WithMany()
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("Oneiros.Data.Model.Player", b =>
                {
                    b.Navigation("Affinity")
                        .IsRequired();

                    b.Navigation("Focus")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Klasse")
                        .IsRequired();

                    b.Navigation("Race")
                        .IsRequired();

                    b.Navigation("Skills");

                    b.Navigation("SubGroup")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
